function Set-SMAConfigurationAsActive
{
<#
.SYNOPSIS 
Configures a configuration as active.
.DESCRIPTION
The command a configuration as active configuration. The active configuration sets defaults for the following parameters:
    - SMACred
    - SMAHost
    - SMAPort
    - SMAPIVersion
    - SMASkipCertCheck

.PARAMETER Configuration
The parameter is mandatory. Data type string.
The command expects name of the configuration which should be set as active configuration. 
The parameter supports tab-completion.

.EXAMPLE
Set-SMAConfigurationAsActive -Configuration <configuration name>
#>
[cmdletbinding()]    
param([Parameter(Mandatory = $true, Position = 0)]
        [ArgumentCompleter( {  
            param ( $CommandName,
            $ParameterName,
            $WordToComplete,
            $CommandAst,
            $FakeBoundParameters )           
            $mlist=(Get-SMAConfigurationList);
            $mlist.Where({ $_ -like "$wordToComplete*" });              
        } )]    
        [string]$Configuration
     )
        
    begin {

    }; #end begin

    process {
        
        setActiveConfig -Configuration $Configuration;               
    }; # end process

    end {

    }; # end END
}; # end function

function Get-SMAActiveConfiguration
{
<#
.SYNOPSIS 
Lists the active configuration.
.DESCRIPTION
The command a configuration lists the configuration which is active.
The command has no parameters.

.EXAMPLE
Get-SMAActiveConfiguration
#>
[cmdletbinding()]    
param()

    begin {

    }; #end begin

    process {
    try {
            Write-Host ('SMA configuration name: ' + $Script:ActiveCfgNuV.Name);
            Write-Host ('SMA host name: '+ $Script:SMAHost);
            Write-Host ('SMA credential: '+ $Script:SMAcred.UserName);
            Write-Host ('SMA port: '+ [string]$Script:SMAPort);
            Write-Host ('SMA SMAPIVersion: '+ $Script:SMAPIVersion);
            Write-Host ('SMA SkipCertChec: '+ [string]$Script:SMASkipCertCheck);
        }
        catch {
            Write-Warning 'Failed to list the active configuration.';
            Write-Host ($_.Exception.Message);
        }; # end catch
    }; # end process

    end {

    }; # end END
}; # end function Get-SMAConfiguration

function Get-SMAConfigurationList
{
<#
.SYNOPSIS 
Lists available configurations.
.DESCRIPTION
The command displays a list of all avaiable configuration.
The command has no parameters.

.EXAMPLE
Get-SMAActiveConfiguration
#>
[cmdletbinding()]    
param()    
    
    try {
        $__CMM_ModuleData.GetConfigerationList($Script:ModuleName,$Script:ModuleVersion); 
    } # end try
    catch {
        Write-Warning 'Failed to list the configurations.';
        Write-Host ($_.Exception.Message);
    }; # end catch    
    
}; # end function Get-SMAConfigurationList