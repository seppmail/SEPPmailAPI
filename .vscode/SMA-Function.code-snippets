{
	<#
	.SYNOPSIS
		????? a SEPPmail ????
	.DESCRIPTION
		This CmdLet lets you ???? a SEPPmail ????. You need the e-Mail address of the user. Optionally it is possible to leave the certificates and keys in the appliance.
	.EXAMPLE
		PS C:\> ????-SMA??? -email 'm.musterfrau@contoso.com'
		Delete a user and all keys and certificates.
	#>
	function dosomething-SMAsomething
	{
		[CmdletBinding(SupportsShouldProcess)]
		param (
			[Parameter(
				Mandatory                       = $true,
				ValueFromPipelineByPropertyName = $true,
				ValueFromPipeline               = $true,
				HelpMessage                     = 'User E-Mail address'
				)]
			[ValidatePattern('([a-z0-9][-a-z0-9_\+\.]*[a-z0-9])@([a-z0-9][-a-z0-9\.]*[a-z0-9]\.(arpa|root|aero|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)|([0-9]{1,3}\.{3}[0-9]{1,3}))')]
			[string]$eMail,
	
			[Parameter(
				Mandatory                       = $false,
				ValueFromPipelineByPropertyName = $true,
				HelpMessage                     = 'if true certificates and private keys will not be deleted'
				)]
			[switch]$keepKeys
		)
	
		begin {
			try {
				Write-Verbose "Creating URL path"
				$uriPath = "{0}/{1}" -f 'user', $eMail
			}
			catch {
				Write-Error "Error$.categoryInfo happened"
			}
		}
		process {
			try {
				Write-Verbose "Building full request uri"
				$boundParam = @{
					keepkeys = $keepkeys
				}
				$uri = New-SMAQueryString -uriPath $uriPath -qParam $boundParam
		
				Write-verbose "Crafting Invokeparam for Invoke-SMARestMethod"
				$invokeParam = @{
					Uri         = $uri 
					Method      = 'DELETE'
					}
				
				if ($PSCmdLet.ShouldProcess($???????,"??????????")) {
					Write-Verbose "Call Invoke-SMARestMethod $uri"
					$UserRaw = Invoke-SMARestMethod @invokeParam
					Write-Verbose 'Returning e-Mail addresses of removed user'
					($userraw.message -split ' ')[3]
				}
			}
			catch {
				Write-Error "An error occured, see $error.CategoryInfo"
			}
		}
	}
}